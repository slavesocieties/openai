from collections import namedtuple
from statistics import harmonic_mean

Rectangle = namedtuple('Rectangle', 'xmin ymin xmax ymax')
multiplier_ver = 8.25
multiplier_hor = 1.75

def area(a, b):
    """Function to find the area of intersection of 2 rectangles

    Parameters
    ----------
    a : Rectangle
        a rectangle
    b : Rectangle
        a rectangle

    Returns
    -------
    dx*dy : float
        the area of intersection of a and b
    """
    dx = min(a.xmax, b.xmax) - max(a.xmin, b.xmin)
    dy = min(a.ymax, b.ymax) - max(a.ymin, b.ymin)
    if (dx >= 0) and (dy >= 0):
        return dx*dy

def fscore(recall, precision):
    """Function to compute the fscore (harmonic mean) from recall and precision

    Parameters
    ----------
    recall : float
        the recall score
    precision : float
        the precision score

    Returns
    -------
    f_score : float
        the fscore given the recall and precision scores
    """
    data = (recall, precision)
    f_score = harmonic_mean(data)
    return f_score

def performance_analysis(test_data, ground_truth):
    """Function to compute the f1 score between the test data and the ground truth for performance analysis

    Parameters
    ----------
    test_data : list
        the layout boxes generated by our algorithm
    ground_truth : list
        the actual layout boxes that are manually created for comparison
        
    Returns
    -------
    f_score_value : float
        the f1 score between the test data and the ground truth
    """
    ra = Rectangle(test_data[4], test_data[5], test_data[2], test_data[3])
    rb = Rectangle(ground_truth[4], ground_truth[5],
                   ground_truth[2], ground_truth[3])
    intersect_area = area(ra, rb)
    # print("\nIntersection Area:",intersect_area)

    test_data_area = (test_data[2]-test_data[4])*(test_data[3]-test_data[5])
    # print("Test Data Area:", test_data_area)

    ground_truth_area = (
        ground_truth[2]-ground_truth[4])*(ground_truth[3]-ground_truth[5])
    # print("Ground Truth Area:", ground_truth_area)

    recall_value = intersect_area/ground_truth_area
    precision_value = intersect_area/test_data_area
    f_score_value = fscore(recall_value, precision_value)

    # print("\nRecall:", recall_value)
    # print("Precision:", precision_value)
    # print("f_score:", f_score_value)

    return(f_score_value)

def GCD(x, y):
    """Function to compute GCD (greatest common divisor) of x and y using the Euclidean algorithm

    Parameters
    ----------
    x : int
        a number
    y : int
        a number
        
    Returns
    -------
    GCD : int
        the GCD of x and y
    """
    while(y):
       x, y = y, x % y
    return abs(x)